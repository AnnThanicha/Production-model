legend.position = c(1, 0),
legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid'),
legend.margin = margin(t = 5.5, r = 5.5, b = 10.5, l = 5.5),
legend.direction = "vertical",
plot.margin = margin(t = 5.5, r = 5.5, b = 5.5, l = 5.5)) +
labs(x = expression(italic(P)["12"]), y = expression(italic(P)["32"]), fill = expression(italic(P)["22"])) +
scale_x_continuous(limits = c(0, 1.16), breaks = seq.int(from = 0, to = 1, by = 0.25))
pAcc3 <- ggplot(ROCdata, aes(x = FCF13, y = FCF23, fill = TCF3)) +
geom_tile() +
scale_fill_gradientn(colours = palette, values = as.character(seq.int(from = 0, to = 1, length.out = length(palette)))) +
theme_bw() +
theme(legend.justification = c(1, 0),
legend.position = c(1, 0),
legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid'),
legend.margin = margin(t = 5.5, r = 5.5, b = 10.5, l = 5.5),
legend.direction = "vertical",
plot.margin = margin(t = 5.5, r = 5.5, b = 5.5, l = 5.5)) +
labs(x = expression(italic(P)["13"]), y = expression(italic(P)["23"]), fill = expression(italic(P)["33"]))
p1 <- dens_plot
p2 <- p1 | ROCsurf_plot
p3 <- p2 | ROCk2_plot
pAcc <- pAcc1 + pAcc2 + pAcc3
all_patch <- p3/pAcc
all_patch
# all_patch[[1]][[1]] <- all_patch[[1]][[1]] + plot_layout(tag_level = 'new')
# all_patch[[2]]      <- all_patch[[2]] + plot_layout(tag_level = 'new')
all_patch <- all_patch + plot_annotation(tag_levels = c('A', '1'), tag_suffix = ')') &
theme(text = element_text(size = 12*font.factor,
family = "CM Roman"))
all_patch
v <- 0.25
p11 <- (0:100)/100
#  estimating alpha and beta parameters when p22 is our starting point
library(tidyverse)
library(bbmle)
# Estimating "true" parameter values for ROC space ------------------------------------------------------------------------------------
mu_mv1 = c(-1,  -1-0.5*0.885, -1-2*0.885,         -1, -1,  -1-0.5*0.885, -1-2*0.885,         -1)
mu_mv2 = c( 0,             0,          0,          0,  0,             0,          0,          0)
mu_mv3 = c( 1,   1+0.5*0.885,          1,  1+2*0.885,  1,   1+0.5*0.885,          1,  1+2*0.885)
for(mvi in 1:1){
set.seed(1)
mv1 <- rnorm(9999, mu_mv1[mvi], 0.885)
mv2 <- rnorm(9999, mu_mv2[mvi], 0.885)
mv3 <- rnorm(9999, mu_mv3[mvi], 0.885)
# plot(1, type = "n", xlab = "",
#      ylab = "",
#      xlim = range(c(mv1, mv2, mv3)),
#      ylim = c(0, max(density(mv1)$y, density(mv1)$y, density(mv2)$y)))
# lines(density(mv1), col = "blue")
# lines(density(mv2), col = "black")
# lines(density(mv3), col = "red")
t. <- sort(c(mv1, mv2, mv3))
t. <- c(t.[1] - 1, t.)
TCF1  <- rep(NA, length(t.))
FCF21 <- rep(NA, length(t.))
FCF31 <- rep(NA, length(t.))
TCF3  <-  rep(NA, length(t.))
FCF13 <- rep(NA, length(t.))
FCF23 <- rep(NA, length(t.))
for(i in 1:length(t.)){
TCF1[i] <- sum(mv1 <= t.[i])/length(mv1)
FCF21[i] <- sum(mv2 <= t.[i])/length(mv2)
FCF31[i] <- sum(mv3 <= t.[i])/length(mv3)
TCF3[i] <- sum(mv3 > t.[i])/length(mv3)
FCF13[i] <- sum(mv1 > t.[i])/length(mv1)
FCF23[i] <- sum(mv2 > t.[i])/length(mv2)
}
class_probs <- list(TCF1  = TCF1,
FCF21 = FCF21,
FCF31 = FCF31,
TCF3  = TCF3,
FCF13 = FCF13,
FCF23 = FCF23
)
ml_est <- vector(mode = "list", length = 5)
names(ml_est) <- c("FCF21", "TCF1", "FCF13", "FCF23", "TCF3")
# Functions ---------------------------------------------------------------------------------------------------------------------------
func_ConcInc <- function(alpha, beta){
y <- 1 - (1 - x^alpha)^(1/beta)
y
}
func_ConvInc <- function(alpha, beta){
y <- (1 - (1 - x)^alpha)^(1/beta)
y
}
func_ConcDec <- function(alpha, beta){
y <- 1 - (1 - (1 - x)^alpha)^(1/beta)
y
}
#  log likelihood function
ll.func_ConcInc <- function(alpha, beta, y = data){
out <- func_ConcInc(alpha = alpha, beta = beta)
lc <- -sum(dnorm(out, y, log = TRUE))
lc
}
#  log likelihood function
ll.func_ConvInc <- function(alpha, beta, y = data){
out <- func_ConvInc(alpha = alpha, beta = beta)
lc <- -sum(dnorm(out, y, log = TRUE))
lc
}
ll.func_ConcDec <- function(alpha, beta, y = data){
out <- func_ConcDec(alpha = alpha, beta = beta)
lc <- -sum(dnorm(out, y, log = TRUE))
lc
}
# Parameter estimation ----------------------------------------------------------------------------------------------------------------
# Estimate parameters with MLE
x <- FCF21 # our independent variable
# x <- RAW_class1$FCF21[RAW_class1$TCF2 == 0] # our independent variable
# x <- k3_ROC_surf[[3]]$ROCdata$FCF21[k3_ROC_surf[[3]]$ROCdata$TCF2 == 0] # our independent variable
data <- TCF1 # calibrate on this
# data <- RAW_class1$TCF1[RAW_class1$TCF2 == 0] # calibrate on this
# data <- k3_ROC_surf[[3]]$ROCdata$TCF1[k3_ROC_surf[[3]]$ROCdata$TCF2 == 0] # calibrate on this
m1 <- mle2(ll.func_ConcInc,
start = list(alpha = 0.5, beta = 0.5))
summary(m1)
data <- FCF31 # calibrate on this
# data <- RAW_class1$FCF31[RAW_class1$TCF2 == 0] # calibrate on this
# data <- k3_ROC_surf[[3]]$ROCdata$FCF31[k3_ROC_surf[[3]]$ROCdata$TCF2 == 0] # calibrate on this
m2 <- mle2(ll.func_ConvInc,
start = list(alpha = 0.5, beta = 0.5))
summary(m2)
# plot(x, TCF1)
# points(x, FCF31)
# points(x, y = func_ConcInc(alpha = coef(m1)[1], beta = coef(m1)[2]), col = "red")
# points(x, y = func_ConvInc(alpha = coef(m2)[1], beta = coef(m2)[2]), col = "orange")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
x <- FCF23 # our independent variable
# x <- k3_ROC_surf[[3]]$ROCdata$FCF22[k3_ROC_surf[[3]]$ROCdata$TCF2 == 0] # our independent variable
data <- FCF13 # calibrate on this
m3 <- mle2(ll.func_ConvInc,
start = list(alpha = 0.5, beta = 0.5))
summary(m3)
data <- TCF3 # calibrate on this
m4 <- mle2(ll.func_ConcInc,
start = list(alpha = 0.5, beta = 0.5))
summary(m4)
# plot(x, FCF13)
# points(x, TCF3)
# points(x, y = func_ConvInc(alpha = coef(m3)[1], beta = coef(m3)[2]), col = "red")
# points(x, y = func_ConcInc(alpha = coef(m4)[1], beta = coef(m4)[2]), col = "orange")
alpha_beta <- list(
alpha1_beta1 = m1,
alpha2_beta2 = m2,
alpha3_beta3 = m3,
alpha4_beta4 = m4
)
# saveRDS(alpha_beta, paste0("Outputs/alpha-beta_cl", mvi, ".RDS"))
}
# diff p33 wrt p11
#  alpha and beta are found from the `run_MLE_alpha-beta.R` script
alpha <- c(coef(m1)[1], coef(m2)[1], coef(m3)[1], coef(m4)[1])
beta  <- c(coef(m1)[2], coef(m2)[2], coef(m3)[2], coef(m4)[2])
v <- 0
p11 <- (0:100)/100
# diff p33 wrt p11
#  alpha and beta are found from the `run_MLE_alpha-beta.R` script
alpha <- c(coef(m1)[1], coef(m2)[1], coef(m3)[1], coef(m4)[1])
beta  <- c(coef(m1)[2], coef(m2)[2], coef(m3)[2], coef(m4)[2])
cg <- -(1 - (1 - v - exp(log(-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p[11] + 1) * beta[1] * exp(log(-p[11] + 1) * beta[1]) / (-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p[11] + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
cg <- -(1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p11 + 1) * beta[1] * exp(log(-p11 + 1) * beta[1]) / (-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
cg
plot(cg)
max(which(cg < -1))
min(which(cg < -1))
v <- 0.25
cg <- -(1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p11 + 1) * beta[1] * exp(log(-p11 + 1) * beta[1]) / (-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
plot(cg)
min(which(cg < -1))
v <- 0.5
plot(cg)
min(which(cg < -1))
v <- 0.5
cg <- -(1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p11 + 1) * beta[1] * exp(log(-p11 + 1) * beta[1]) / (-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
plot(cg)
min(which(cg < -1))
v <- 0
p11 <- (0:100)/100
p33 <- 1 - (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4])
plot(p33)
v <- 00.5
p33 <- 1 - (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4])
plot(p33)
cg <- -(1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p11 + 1) * beta[1] * exp(log(-p11 + 1) * beta[1]) / (-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
plot(cg)
min(which(cg < -1))
p33[min(which(cg < -1))]
v <- 00
p11 <- (0:100)/100
p33 <- 1 - (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4])
plot(p33)
# diff p33 wrt p11
cg <- -(1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4]) ^ (0.1e1 / beta[4]) / beta[4] * (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4] * alpha[4] / (-p11 + 1) * beta[1] * exp(log(-p11 + 1) * beta[1]) / (-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1] * exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1]) / (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) / (1 - (1 - v - exp(log(-exp(log(-p11 + 1) * beta[1]) + 1) / alpha[1])) ^ alpha[4])
plot(cg)
min(which(cg < -1))
p33[min(which(cg < -1))]
plot(density(c(rnorm(9999,-1, 0.885), rnorm(9999, 0, 0.885), rnorm(9999, 1, 0.885))))
n <- 100
r <- 500
interval <- 7
rbinom(100,1,0.5)
replicate(r, rbinom(n, 1, r))
replicate(r, rbinom(n, 1, p))
p <- 0.5
replicate(r, rbinom(n, 1, p))
n <- 10
p <- 0.5
r <- 2
interval <- 7
replicate(r, rbinom(n, 1, p))
fn0 <- function(){
replicate(r, rbinom(n, 1, p))
}
replicate(interval, fn0)
replicate(interval, fn0())
out <- replicate(interval, fn0())
out
replicate(r, rbinom(n, 1, p))
array(1:9, dim = c(3, 3))
apply(out, c(1, 2), sum)
apply(out, c(1, 2), sum)/7
n <- 100
p <- 0.5
r <- 1
interval <- 7
fn0 <- function(){
replicate(r, rbinom(n, 1, p))
}
out <- replicate(interval, fn0())
apply(out, c(1, 2), sum)/7
apply(out, c(1, 2), sum)/interval |> summary()
apply(out, 1, sum)/interval |> summary()
out <- replicate(interval, fn0())
apply(out, 1, sum)/interval |> summary()
summary(apply(out, 1, sum)/interval)
n <- 1000
p <- 0.5
r <- 1
interval <- 7
fn0 <- function(){
replicate(r, rbinom(n, 1, p))
}
out <- replicate(interval, fn0())
summary(apply(out, 1, sum)/interval)
interval <- 1
out <- replicate(interval, fn0())
summary(apply(out, 1, sum)/interval)
p <- 0.3
interval <- 1
fn0 <- function(){
replicate(r, rbinom(n, 1, p))
}
out <- replicate(interval, fn0())
summary(apply(out, 1, sum)/interval)
interval <- 1:30
outL <- list()
n <- 10000
p <- 0.3
r <- 1
interval <- 1:30
fn0 <- function(){
replicate(r, rbinom(n, 1, p))
}
outL <- list()
for(i in interval){
out1 <- replicate(interval, fn0())
out2 <- apply(out, 1, sum)/i
out3 <- c(mean(out2) quantile(out, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
outL[[i]] <- out3
}
out1 <- replicate(i, fn0())
out1
out1 <- replicate(i, fn0())
i = 1
replicate(i, fn0())
out1 <- replicate(i, fn0())
out2 <- apply(out1, 1, sum)/i
out3 <- c(mean(out2) quantile(out, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
out3 <- c(mean(out2) quantile(out2, c(0.05, 0.95)))
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
out3
names(out3) <- c("mean", "q0.05", "q0.95")
for(i in interval){
out1 <- replicate(i, fn0())
out2 <- apply(out1, 1, sum)/i
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
outL[[i]] <- out3
}
outL
out <- do.call(outL, rbind)
out <- do.call(rbind, outL)
out
p <- 0.5
for(i in interval){
out1 <- replicate(i, fn0())
out2 <- apply(out1, 1, sum)/i
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
outL[[i]] <- out3
}
out <- do.call(rbind, outL)
out
i=2
out1 <- replicate(i, fn0())
out1
out2 <- apply(out1, 1, sum)/i
out2
sum(out2 >= 0.5)
sum(out2 >= 0.5)/length(out2)
for(i in interval){
out1 <- replicate(i, fn0())
out2 <- apply(out1, 1, sum)/i
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
outL[[i]] <- sum(out2 >= 0.5)/length(out2)
}
out <- do.call(rbind, outL)
out
plot(out)
plot(1:30, out[,1])
p <- 0.3
for(i in interval){
out1 <- replicate(i, fn0())
out2 <- apply(out1, 1, sum)/i
out3 <- c(mean(out2), quantile(out2, c(0.05, 0.95)))
names(out3) <- c("mean", "q0.05", "q0.95")
outL[[i]] <- sum(out2 >= 0.5)/length(out2)
}
out <- do.call(rbind, outL)
out
plot(out)
# Example data
cities <- c("City A", "City B", "City C", "City D")
env_sustainability <- c(0.8, 0.6, 0.7, 0.9)
social_inclusivity <- c(0.7, 0.5, 0.6, 0.8)
economic_vitality <- c(0.9, 0.7, 0.8, 0.6)
# Step 3: Weight Assignment
env_weight <- 1/3
soc_weight <- 1/3
eco_weight <- 1/3
# Step 4: Aggregation
composite_scores <- env_sustainability * env_weight + social_inclusivity * soc_weight + economic_vitality * eco_weight
# Create a data frame with composite scores
composite_data <- data.frame(City = cities, Composite_Score = composite_scores)
# Step 5: Interpretation and Analysis
# Rank cities based on composite scores
ranked_data <- composite_data[order(-composite_data$Composite_Score), ]
# Print the ranked data
print(ranked_data)
composite_data
setwd(paste0("C:/Users/", Sys.info()["user"], "/OneDrive - Wageningen University & Research/PhD/Modelling/ProdMod"))
setwd(paste0("C:/Users/", Sys.info()["user"], "/OneDrive - Wageningen University & Research/PhD/Modelling/ProdMod"))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
xPRM <- list()
# Generic inputs ----------------------------------------------------------
xPRM$storeWD <- paste0("C:/Users/", Sys.info()["user"], "/OneDrive - Wageningen University & Research/PhD/Modelling/ProdMod")
xPRM$n_cows <- 125   # number of cows in herd
xPRM$n_sim  <- 0001  # number of simulations
xPRM$n_yrs  <- 10    # time horizon in years
xPRM$ts     <- 365   # time-steps per year
source("ProdMod_internalFunc.R")
# Production inputs -------------------------------------------------------
xPRM$max_par      <- 10                                   # maximum parity for last lactation (Authors' expertise)
xPRM$use_par      <- 6                                    # expected lactaions of cow - depreciation over useful life mkFrames (Authors expertise)
xPRM$p_par        <- setNames(c(0.31, 0.26, 0.20, 0.12, c(rep(0.11/6, 6))), paste0("par", seq(xPRM$max_par))) # preliminary probabilty of a cow being in 1:max_par (CRV, 2019)
xPRM$p_dtoes      <- 0.55                                 # probability of oestrus detection (Based on Rutten et al., 2014; doi:10.3168/jds.2014-7948)
xPRM$p_conc       <- c(0.45, 0.42, 0.42, 0.38, 0.33, 0.27) # success of insemination for insemination number (Inchiasri et al., 2011; doi:10.1111/j.1439-0531.2011.01782.x)
xPRM$p_stlbrn     <- 0.0                                  # probability of cow having a still born [preliminary 20/11/19]
xPRM$p_gencull    <- c(0.03, 0.07, 0.07, 0.1, 0.2)        # calibrated so that overall culling rate ~30%
xPRM$p_mort       <- 0.02                                 # mortality rate of general cull cows (Authors' expertise)
xPRM$p_rh         <- 0.3                                  # calibrated probability that a replacement heifer will enter the herd on the following day that a cow dies (geometric distribution: rgeom())
# xPRM$max_insem    <- 4                                    # culling rule: maximum number of inseminations a farmer will choose to inseminate a cow that is in oestrus (Inactive parameter since 01/01/2020)
xPRM$yield_thresh <- 15                                   # kg/day; infertile cow will be culled if producing below this parameter (Authors' expertise)
xPRM$VWP          <- 84                                   # voluntary waiting period in days before next AI (Inchiasri et al., 2010; doi:10.1016/j.theriogenology.2010.04.008)
xPRM$DPL          <- 56                                   # dry period length in days (Inchiasri et al., 2010; doi:10.1016/j.theriogenology.2010.04.008)
xPRM$ADG          <- ((650-540)/2)/410                    # average daily gain (Based on Kok et al., 2017; https://doi.org/10.1371/journal.pone.0187101)
# milk yield parameters (Kok et al., 2017; https://doi.org/10.1371/journal.pone.0187101)
# parameter vectors are arranged according to parity order
xPRM$a   <- c(31.6, 40.6, 44.1)
xPRM$b   <- c(-0.0447, -0.0708, -0.0835)
xPRM$d   <- -16.1
xPRM$K   <- 0.06
xPRM$ady <- with(xPRM,
sapply(1:length(a), function(x){mean(a[x] +b[x] * 1:305 + d *exp(-K * 1:305))})) # average daily 305-d milk yield in kg
xPRM$fat  <- c(0.0448, 0.045, 0.0451, 0.0451,  0.0451, 0.0451, 0.0451, 0.0451,  0.0451, 0.0451)  # fat content
xPRM$prot <- c(0.0355, 0.0359, 0.0351, 0.0351, 0.0351, 0.0351, 0.0351, 0.0351, 0.0351, 0.0351)   # protein content
# energy requirements
xPRM$G.ENGY <- c(660, 330)              # growth energy for cows in parity 1 & 2 (van Es, 1978; https://doi.org/10.1016/0301-6226(78)90029-5)
xPRM$P.ENGY <- c(2700, 1500, 850, 450)  # energy during stage of lactation in order of last month, to fourth month before calving (Remelink et al., 2016; table 6.10 Dairy farming handbook)
# Economic inputs ---------------------------------------------------------
xPRM$cost.EkVEM  <- 0.1766363636  # 09-2019 - 06-2020 (WECR, 2020; https://www.wur.nl/nl/Onderzoek-Resultaten/Onderzoeksinstituten/livestock-research/Producten/Voederwaardeprijzen-Rundvee.htm)
xPRM$cost.insem  <- 12.85     # cost per insemination (Blanken et al., 2016; KWIN)
# culling costs
xPRM$cost.rear  <- c(919, 1790, 3307)    # min, mean, max rearing costs (Nor et al., 2015; https://doi.org/10.1186/s13620-015-0058-x)
xPRM$perc.dress <- 0.6                   # carcass dressing percentage (Rutten et al., 2014; doi:10.3168/jds.2014-7948.)
xPRM$price.kg   <- c(2.06, 2.44, 2.77)   # Wageningen Economic Research, 2020. Agricultural Prices. https://agrimatie.nl/Prijzen.aspx?ID=15125. (average 2019-2010)
# Milk revenue
xPRM$MilkPrice <- 0.3502 # Wageningen Economic Research, 2020. Agricultural Prices. https://agrimatie.nl/Prijzen.aspx?ID=15125. c/kg average 2016 - may 2020
xPRM$RemCost <- 39 # Rendac (2015) https://www-cambridge-org.ezproxy.library.wur.nl/core/services/aop-cambridge-core/content/view/7977B21E1B8F78E002AE0A1196CA98D8/S1751731117001306a.pdf/estimating_the_economic_impact_of_subclinical_ketosis_in_dairy_cattle_using_a_dynamic_stochastic_simulation_model.pdf
xPRM$validate    <- TRUE
xPRM$seed <- 123
xPRM$last.update <- date()
# Save inputs -------------------------------------------------------------
save(xPRM, file = "ProdMod_defaultParameters.RData") #~ *NB* remember to save the input data as an .Rdata file every time you add inputs in this script by running this line of code
# xPRM <- mget(load("default_Parameters.RData", envir=(NE. <- new.env())), envir=NE.)
# sink("default_Parameters.txt")
# print(xPRM)
# sink()
# control herd size, number of simulations and time horizon here
xPRM$n_cows <- 10      # number of simulated cows per time step
xPRM$n_sim  <- 1      # number of simulations
xPRM$n_yrs  <- 1
xPRM         <- mget(load("ProdMod_defaultParameters.RData",
envir=(NE. <- new.env())), envir=NE.)$xPRM; rm(NE.)  # input parameters in list
setwd(paste0("C:/Users/", Sys.info()["user"], "/OneDrive - Wageningen University & Research/PhD/Modelling/ProdMod"))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Load packages -----------------------------------------------------------
library(data.table)
library(profvis)
library(directlabels)
library(esquisse)
library(Hmisc)
library(varhandle)
library(tidyverse)
library(beepr)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(mc2d)
library(devtools)
# Source inputs -----------------------------------------------------------
source("ProdMod_internalFunc.R")
xPRM         <- mget(load("ProdMod_defaultParameters.RData",
envir=(NE. <- new.env())), envir=NE.)$xPRM; rm(NE.)  # input parameters in list
daysOpen.mat <- fread("daysOpen_mat.csv")                                      # related to fertility culling decisions
# control herd size, number of simulations and time horizon here
xPRM$n_cows <- 10      # number of simulated cows per time step
xPRM$n_sim  <- 1      # number of simulations
xPRM$n_yrs  <- 1
# ensure daysOpen.mat is set to correct herd size
if(xPRM$n_cows != nrow(daysOpen.mat)){
print("The number of cows you want to simulate is not equal to the cows used to generate `daysOpen.mat`.
Please, ensure the the number of cows in `daysOpen.mat` is equal to the number of cows you want to simulate.
Your `daysOpen.mat` will be removed from the environment now!")
rm(daysOpen.mat)
}
X = xPRM
n <- with(X, ts*n_yrs)
n
list2env(X, globalenv())
cowsList  <- vector(mode = "list", length = n) # list to collect daily data for cows
cowsList
# initialise cow-spaces before simulation
cow      <- vector(mode = "list")
cow
cullcows <- list() #~ used for validation purposes, collects culled cow data
xPRM
cow
cullcows <- list() #~ used for validation purposes, collects culled cow data
cd1 <- paste0(paste0(rep(0, 5-1), sep="", collapse=""), 1, "_")
cd1
cow[["year"]]           <- rep(0, n_cows)
cow[["day"]]            <- rep(0, n_cows)
cow[["UID"]]            <- sprintf("%s%0*d", cd1, 11 - nchar(cd1), 1:n_cows)
cow[["space"]]          <- c(1:n_cows)    # cow space
cow[["status"]]         <- rep(1, n_cows) # categorical variable (1 = healthy; 2 = culled for fertility reasons; 3 = culled at the end of useful life(max par);
cow
# 4 = culled for general reasons; 5 = mortality; 6 = lame; 0 = no cow in space)
cow[["par"]]            <- sample(c(1:max_par), size = n_cows, prob = p_par, replace = TRUE) ; parCAT <- cow[["par"]] ; parCAT[parCAT > 3] <- 3# parity
cow[["dim"]]            <- sample(1:(285+DPL), n_cows, replace = TRUE) # days in milk
cow[["mdl"]]            <- replicate(n_cows, MDL_func(n_cows))       # milking days left
cow[["rpl"]]            <- replicate(n_cows, RPL(n_cows))            # relative production level
cow[["yield"]]          <- rep(0, n_cows)
cow[["yield.rdc"]]      <- rep(0, n_cows)    # reduced daily yield
cow[["detoest"]]        <- rep(0, n_cows)    # detect oestrus variable
cow[["calf"]]           <- rep(0, n_cows)    # variable indicating whether a calf is born or not
cow[["cull"]]           <- rep(0, n_cows)    # variable to tag cull cows (2 = fert; 3 = max.par; 4 = gen.; 5 = mortality; 6 = lame)
cow[["oestrus"]]        <- rep(0, n_cows)    # variable scheduling day of oestrus
cow[["daycalf"]]        <- (cow[["mdl"]] + DPL) - (cow[["dim"]]) + 1 # day of calving (initialisation)
cow[["prevdaycalf"]]    <- rep(0, n_cows)
cow[["pregnant"]]       <- ifelse(cow[["daycalf"]] > cow[["dim"]], 1, 0)        # variable indicating pregnancy status
cow[["dayendvwp"]]      <- rep(0, n_cows)    # variable scheduling the day end of VWP
cow[["daycullfert"]]    <- rep(0, n_cows)    # variable scheduling the day a decision is made to stop inseminating and to tag cow as cull for fertility reasons
cow[["n_insem"]]        <- rep(0, n_cows)    # counter variable regarding the number of inseminations
cow[["m_oest"]]         <- rep(0, n_cows)    # counter variable regarding number of missed oestrus
cow[["weight"]]         <- BW(parCAT, cow)
BW(parCAT, cow)
cow[["act.weight"]]     <- cow[["weight"]]
cow[["energy"]]         <- rep(0, n_cows)
cow[["energy"]]         <- rep(0, n_cows)
cow[["act.energy"]]     <- cow[["energy"]]
cow[["disc.milk"]]      <- rep(0, n_cows)
cow[["cost.insem"]]     <- rep(0, n_cows)
cow[["cost.feed"]]      <- rep(0, n_cows)
cow[["cost.cull"]]      <- rep(0, n_cows)
cow[["cost.milk"]]      <- rep(0, n_cows)
cow[["cost.milk.disc"]] <- rep(0, n_cows)
cow[["rev.milk"]]       <- rep(0, n_cows)
cow
n_cows
day           <- 0
(ifelse(c(1:365*2) %% 365 == 0, 365, c(1:365*2) %% 365) %/% 92) + 1
table((ifelse(c(1:365*2) %% 365 == 0, 365, c(1:365*2) %% 365) %/% 92) + 1)
p_conc
ADG
G.ENGY
P.ENGY
